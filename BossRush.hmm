Code "Rings by Parry", by "Hypernova" and "thej01"
//
	#include "Reflection" noemit
    #include "BlackboardStatus" noemit
	#import "Services"
    #lib "Reflection"
    #lib "BlackboardStatus"
	#lib "BlackboardItem"
    #lib "SonicParameters"
    #lib "Sonic"
    #lib "Time"
    #lib "Lua"
	#lib "HMM"
	#lib "INI"
	using System.Numerics;
    using System.Collections.Generic;
    using System.IO;
    #load "WindowsBase.dll"
    #load "PresentationCore.dll"
    #load "System.Numerics.dll"
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	if (SonicParametersInfo.pData == null)
		return;
		
	var pBlackboardStatus = BlackboardStatus.Get();
	if (Player.GetPlayerType() != Player.PlayerType.Sonic)
		return;

	var pBlackboardItem = BlackboardItem.Get();
	if (pBlackboardItem == null)
		return;
		
	int maxrings = pBlackboardItem->RingCapacity;
	int rings = pBlackboardItem->RingCount;

	string currentStage = LevelInfo.GetCurrentStageID();
	List<string> excludedStages = new List<string> { "w2r01" };
	if (LevelInfo.GetCurrentStageID() == "w2t01")
    {	
		string Anim = Lua.Call<string>("GetCurrentAnimationName");
		if (Anim == "PARRY_FLY")
		{
			bool parryFly = (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateParry);

			if ((parryFly) && (rings < 100))
			{
				pBlackboardItem->RingCount += 1;
				
				if(rings > maxrings)
				{pBlackboardItem->RingCount = maxrings;}

				if(rings < 0)
				{pBlackboardItem->RingCount = 0;}
			}
		}
		
		if (Anim == "PARRY")
		{
			bool parryQTE = (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateParry);

			if ((parryQTE) && (rings < 50))
			{
				pBlackboardItem->RingCount += 2;
				
				if(rings > maxrings)
				{pBlackboardItem->RingCount = maxrings;}

				if(rings < 0)
				{pBlackboardItem->RingCount = 0;}
			}
		}
	}
}

Code "BossRush_Combat"
//
	#include "Reflection" noemit
	#lib "Reflection"
	#lib "BossRushParameter"
    #lib "HMM"
	#lib "INI"
    #import "Services"

    static bool IsConfigInitialised = false;
	static int BossHP = 0;
    static bool healthBool = false;
//
{
    if (!IsConfigInitialised)
    {
		var mod = HMM.GetModByID("566416");

		if (mod == null)
			return;

		string modConfigIniPath = System.IO.Path.Combine(mod.Path, "mod.ini");
		var ini = INI.Read(modConfigIniPath);

		BossHP = INI.Parse<int>(ini["Main"]["BossCombat"], BossHP);
        IsConfigInitialised = true;

        if (BossHP == 1)
        { healthBool = true; }
        else
        { healthBool = false; }
    }
	
	if (!healthBool)
		return;

	var BossRushParameterInfo = Reflection.GetDataInfo<BossRushParameter.Root>("bossrush");

	if (BossRushParameterInfo.pData == null)
		return;

	RFL_SET_PARAM(BossRushParameterInfo, element[0].stages[0].healthPoint, 62500);
	RFL_SET_PARAM(BossRushParameterInfo, element[0].stages[1].healthPoint, 66500);
	RFL_SET_PARAM(BossRushParameterInfo, element[0].stages[2].healthPoint, 67000);

	RFL_SET_PARAM(BossRushParameterInfo, element[1].stages[0].healthPoint, 50000);
	RFL_SET_PARAM(BossRushParameterInfo, element[1].stages[1].healthPoint, 55000);
	RFL_SET_PARAM(BossRushParameterInfo, element[1].stages[2].healthPoint, 57000);

	RFL_SET_PARAM(BossRushParameterInfo, element[2].stages[0].healthPoint, 40000);
	RFL_SET_PARAM(BossRushParameterInfo, element[2].stages[1].healthPoint, 42000);
	RFL_SET_PARAM(BossRushParameterInfo, element[2].stages[2].healthPoint, 44000);

	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[0].stages[0].healthPoint, 33000);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[0].stages[1].healthPoint, 36700);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[0].stages[2].healthPoint, 37500);

	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[1].stages[0].healthPoint, 25000);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[1].stages[1].healthPoint, 27500);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[1].stages[2].healthPoint, 28300);
	
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[2].stages[0].healthPoint, 15000);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[2].stages[1].healthPoint, 17500);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[2].stages[2].healthPoint, 18300);
}

Code "SonicParameters"
//
	#include "Reflection" noemit
	#import "Services"
	#import "Plugins"
	#lib "GameManager"
	#lib "GameObject"
	#lib "Reflection"
	#lib "SonicParameters"
	#lib "BlackboardStatus"
//
{
	var pBlackboardStatus = BlackboardStatus.Get();
	if (Player.GetPlayerType() != Player.PlayerType.Sonic)
		return;
		
	string currentStage = LevelInfo.GetCurrentStageID();
		
	bool isSupreme = (GameManager.GetGameObject("Rifle0") != null);
	bool isRiflebeast = (GameManager.GetGameObject("RifleBeast0") != null);
	
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

	if (SonicParametersInfo.pData == null)
		return;
		
	RFL_SET_PARAM(SonicParametersInfo, common.acceleComboSet.sonic.motionSpeedRatio, 1.8f);
	RFL_SET_PARAM(SonicParametersInfo, common.acceleComboSet.sonic.motionSpeedRatioAccele, 2.15f);
	RFL_SET_PARAM(SonicParametersInfo, common.acceleComboSet.superSonic1.motionSpeedRatio, 1.8f);
	RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.sonic.loopRadius, 6.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.sonic.loopTime, 0.3f);
	RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.sonic.loopSpeedCurveRatio, 0.3f);
	RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.sonic.loopEndStopTime, 0.05f);
	RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.sonic.loopEndSpeed, 12.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.sonic.kickSpeed, 60.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.superSonic1.loopRadius, 6.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.superSonic1.loopTime, 0.3f);
	RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.superSonic1.loopEndSpeed, 12.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.superSonic1.kickSpeed, 65.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.sonic.startWait, 0.2f);
	RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.sonic.zigzagBeginOneStepTime, 0.1f);
	RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.sonic.zigzagEndOneStepTime, 0.1f);
	RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.sonic.cameraOffsetElevation, -5.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.startWait, 0.15f);
	RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.zigzagBeginOneStepTime, 0.07f);
	RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.zigzagEndOneStepTime, 0.07f);
	RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.sonic.chargeTime, 0.375f);
	RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.sonic.bounceTime, 0.385f);
	RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.sonic.numSlashs, 8);
	RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.sonic.slowRatio0, 1.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.sonic.slowRatio1, 1.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.chargeTime, 0.325f);
	RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.bounceTime, 0.275f);
	RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.numSlashs, 12);
	RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.sonic.riseTime, 0.2f);
	RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.sonic.slowRatio, 0.25f);
	RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.sonic.maxPressTimeHeight, 4.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.motionTime, 0.9f);
	RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.lastHitTime, 0.8f);
	RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.sonic.speed, 10.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.sonic.maxSpeed, 20.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.speed, 10.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.maxSpeed, 20.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.appearTime, 0.7f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.spinRadius, 1.6f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.spinSpeed, -275.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.spinSpeedPostLaunch, -300.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.chargeTime, 0.45f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.spawnTime, 0.15f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.launchPreWaitTime, 0.4f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.launchRandomize, true);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.launchWaitTime, 1.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.tangent0, 15.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.tangent1, 10.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.speed, 25.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.maxSpeed, 40.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.whiteoutBeginTime, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.whiteoutFadeOutTime, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.whiteoutFadingTime, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.whiteoutFadeInTime, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.appearTime, 0.5f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.chargeTime, 0.4f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spawnTime, 0.074f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.launchPreWaitTime, 0.4f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.launchRandomize, true);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.launchWaitTime, 1.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.speed, 32.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.maxSpeed, 65.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.accele, 60.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutBeginTime, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutFadeOutTime, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutFadingTime, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutFadeInTime, 0.0f);
	
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.avoid.transitExistTarget[5], SonicParameters.Action.HomingAttack);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.avoid.transitInAir[5], SonicParameters.Action.Pursuit);
	
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.airBoost.transitExistTarget[0], SonicParameters.Action.Pursuit);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.airBoost.transitInAir[0], SonicParameters.Action.Pursuit);
	
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitExistTarget[0], SonicParameters.Action.AerialHomingAttack);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitExistTarget[5], SonicParameters.Action.HomingShot);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitInAir[0], SonicParameters.Action.HomingAttack);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitInAir[5], SonicParameters.Action.HomingShot);
	
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.homingShot.transitExistTarget[0], SonicParameters.Action.Pursuit);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.homingShot.transitExistTarget[3], SonicParameters.Action.SpinSlash);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.homingShot.transitInAir[0], SonicParameters.Action.Pursuit);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.homingShot.transitInAir[3], SonicParameters.Action.SpinSlash);
	
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.loopKick.transitExistTarget[0], SonicParameters.Action.HomingAttack);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.loopKick.transitExistTarget[5], SonicParameters.Action.HomingShot);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.loopKick.transitInAir[5], SonicParameters.Action.HomingShot);
	
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.crasher.transitExistTarget[0], SonicParameters.Action.AerialAcceleCombo1);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.crasher.transitExistTarget[5], SonicParameters.Action.HomingShot);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.crasher.transitInAir[5], SonicParameters.Action.HomingShot);
	
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.spinSlash.transitExistTarget[0], SonicParameters.Action.Pursuit);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.spinSlash.transitExistTarget[3], SonicParameters.Action.HomingAttack);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.spinSlash.transitInAir[0], SonicParameters.Action.Pursuit);
	RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.spinSlash.transitInAir[3], SonicParameters.Action.HomingAttack);
	
	if ((LevelInfo.GetCurrentStageID() == "w3t01") || (isSupreme) || (isRiflebeast))
	{
		if (IS_WORLD_FLAG(IsBattle) && BlackboardStatus.IsSuper())
		{
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smash.damageRateSS, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smash.attributes, 164);
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smashLast.damageRateSS, 45.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smashLast.attributes, 164);
			
			RFL_SET_PARAM(SonicParametersInfo, common.smashSet.superSonic1.hit1.shapeSize.X, 35.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.smashSet.superSonic1.hit1.shapeSize.Y, 35.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.smashSet.superSonic1.hit2.shapeSize.X, 35.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.smashSet.superSonic1.hit2.shapeSize.Y, 35.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.spinSlash.transitExistTarget[2], SonicParameters.Action.Smash);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.spinSlash.transitExistTarget[3], SonicParameters.Action.HomingAttack);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.spinSlash.transitInAir[0], SonicParameters.Action.Pursuit);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.spinSlash.transitInAir[2], SonicParameters.Action.QuickCyloop);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.spinSlash.transitInAir[3], SonicParameters.Action.AerialHomingAttack);
			
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.quickCyloop.transitExistTarget[0], SonicParameters.Action.Pursuit);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.quickCyloop.transitExistTarget[2], SonicParameters.Action.Smash);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.quickCyloop.transitExistTarget[3], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.quickCyloop.transitExistTarget[5], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.quickCyloop.transitInAir[0], SonicParameters.Action.Pursuit);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.quickCyloop.transitInAir[2], SonicParameters.Action.Smash);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.quickCyloop.transitInAir[3], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.quickCyloop.transitInAir[5], SonicParameters.Action.Root);
			
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.aerialQuickCyloop.transitExistTarget[2], SonicParameters.Action.Smash);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.aerialQuickCyloop.transitExistTarget[3], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.aerialQuickCyloop.transitExistTarget[5], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.aerialQuickCyloop.transitInAir[2], SonicParameters.Action.Smash);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.aerialQuickCyloop.transitInAir[3], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.aerialQuickCyloop.transitInAir[5], SonicParameters.Action.Root);

			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.lossQuickCyloopEnergy, 40.0f);
		}
		else
		{	
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smash.damageRateSS, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smash.attributes, 0);
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smashLast.damageRateSS, 200.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smashLast.attributes, 0);
			
			RFL_SET_PARAM(SonicParametersInfo, common.smashSet.superSonic1.hit1.shapeSize.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.smashSet.superSonic1.hit1.shapeSize.Y, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.smashSet.superSonic1.hit2.shapeSize.X, 1.5f);
			RFL_SET_PARAM(SonicParametersInfo, common.smashSet.superSonic1.hit2.shapeSize.Y, 0.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.quickCyloop.transitInAir[2], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.spinSlash.transitExistTarget[2], SonicParameters.Action.QuickCyloop);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.quickCyloop.transitExistTarget[2], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.aerialQuickCyloop.transitExistTarget[2], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.aerialQuickCyloop.transitInAir[2], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.lossQuickCyloopEnergy, 60.0f);
		}
	}
}

Library "BossRushParameter"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct BossRushStageParameter
    {
        [FieldOffset(0x00)] public uint hour;
        [FieldOffset(0x04)] public uint minute;
        [FieldOffset(0x08)] public uint healthPoint;
        [FieldOffset(0x0C)] public uint recoveryRing;
        [FieldOffset(0x10)] public byte powerLevel;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct BossRushParameterElement
    {
        [FieldOffset(0x00)] public int applicableFailedCount;
        [FieldOffset(0x04)] public unsafe fixed byte /* BossRushStageParameter[3] */ _stages[60];

        public unsafe BossRushStageParameter* stages
        {
            get
            {
                fixed (byte* p_stages = _stages)
                    return (BossRushStageParameter*)p_stages;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1B0)]
    public struct Root
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossRushParameterElement[3] */ _element[192];

        public unsafe BossRushParameterElement* element
        {
            get
            {
                fixed (byte* p_element = _element)
                    return (BossRushParameterElement*)p_element;
            }
        }

        [FieldOffset(0xC0)] public unsafe fixed byte /* BossRushParameterElement[3] */ _elementEasy[192];

        public unsafe BossRushParameterElement* elementEasy
        {
            get
            {
                fixed (byte* p_elementEasy = _elementEasy)
                    return (BossRushParameterElement*)p_elementEasy;
            }
        }

        [FieldOffset(0x180)] public uint defaultRing;
        [FieldOffset(0x184)] public uint defaultRingEasy;
        [FieldOffset(0x188)] public float defaultCyloopGauge;
        [FieldOffset(0x18C)] public float readyTime;
        [FieldOffset(0x190)] public float clearTime;
        [FieldOffset(0x194)] public float failedTime;
        [FieldOffset(0x198)] public float clearWaitTime;
        [FieldOffset(0x19C)] public float failedWaitTime;
        [FieldOffset(0x1A0)] public float kodamaOrdinaryTextTime;
        [FieldOffset(0x1A4)] public float kodamaFightDelayTime;
        [FieldOffset(0x1A8)] public float kodamaFightTextTime;
        [FieldOffset(0x1AC)] public float kodamaSplendidTextTime;
    }
}
